#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
ุฃุฏุงุฉ ุชุตุฏูุฑ ุจูุงูุงุช ุงููุณุชุฎุฏููู ุฅูู ููู ุฅูุณู - ุฎุงุตุฉ ุจุงููุฏูุฑ ููุท
ูุฐุง ุงูููู ูุญุชูู ุนูู ุฏุงูุฉ export_users_command ุงูุชู ุชุชูุญ ูููุฏูุฑ ุชุตุฏูุฑ ุจูุงูุงุช ุงููุณุชุฎุฏููู ุฅูู ููู ุฅูุณู
"""

import os
import logging
import pandas as pd
from datetime import datetime
from sqlalchemy import text
from telegram import Update
from telegram.ext import CallbackContext

# ุฅุนุฏุงุฏ ุงูุชุณุฌูู
logger = logging.getLogger(__name__)

async def export_users_command(update: Update, context: CallbackContext):
    """
    ูุนุงูุฌ ุฃูุฑ /export_users ูุชุตุฏูุฑ ุจูุงูุงุช ุงููุณุชุฎุฏููู ุฅูู ููู ุฅูุณู
    ูุฐุง ุงูุฃูุฑ ูุชุงุญ ูููุฏูุฑ ููุท
    """
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    try:
        # ุงูุชุญูู ูู ุตูุงุญูุงุช ุงููุฏูุฑ
        is_admin = await check_admin_rights(user_id, context)
        
        if not is_admin:
            logger.warning(f"ูุญุงููุฉ ุบูุฑ ูุตุฑุญ ุจูุง ูููุตูู ุฅูู ุฃูุฑ ุงูุชุตุฏูุฑ ูู ูุจู ุงููุณุชุฎุฏู {user_id}")
            await context.bot.send_message(
                chat_id=chat_id,
                text="โ๏ธ ุนุฐุฑุงูุ ูุฐุง ุงูุฃูุฑ ูุชุงุญ ูููุฏูุฑ ููุท."
            )
            return
        
        # ุฅุฑุณุงู ุฑุณุงูุฉ ุงูุชุธุงุฑ
        wait_message = await context.bot.send_message(
            chat_id=chat_id,
            text="โณ ุฌุงุฑู ุงุณุชุฎุฑุงุฌ ุจูุงูุงุช ุงููุณุชุฎุฏููู ูุชุตุฏูุฑูุง ุฅูู ููู ุฅูุณู...\nูุฏ ุชุณุชุบุฑู ูุฐู ุงูุนูููุฉ ุจุถุน ุซูุงูู."
        )
        
        # ุชุตุฏูุฑ ุจูุงูุงุช ุงููุณุชุฎุฏููู ุฅูู ููู ุฅูุณู
        excel_path = await export_users_to_excel(admin_user_id=user_id)
        
        if not excel_path or not os.path.exists(excel_path):
            logger.error(f"ูุดู ุชุตุฏูุฑ ุจูุงูุงุช ุงููุณุชุฎุฏููู ูููุฏูุฑ {user_id}")
            await context.bot.send_message(
                chat_id=chat_id,
                text="โ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชุตุฏูุฑ ุจูุงูุงุช ุงููุณุชุฎุฏููู. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู ูุงุญูุงู."
            )
            return
        
        # ุฅุฑุณุงู ููู ุงูุฅูุณู
        logger.info(f"ุฅุฑุณุงู ููู ุชุตุฏูุฑ ุจูุงูุงุช ุงููุณุชุฎุฏููู ูููุฏูุฑ {user_id}: {excel_path}")
        with open(excel_path, 'rb') as excel_file:
            await context.bot.send_document(
                chat_id=chat_id,
                document=excel_file,
                filename=os.path.basename(excel_path),
                caption="๐ ุฅููู ููู ุฅูุณู ูุญุชูู ุนูู ุจูุงูุงุช ุฌููุน ุงููุณุชุฎุฏููู ุงููุณุฌููู ูู ุงูุจูุช."
            )
        
        # ุชุญุฏูุซ ุฑุณุงูุฉ ุงูุงูุชุธุงุฑ
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=wait_message.message_id,
            text="โ ุชู ุชุตุฏูุฑ ุจูุงูุงุช ุงููุณุชุฎุฏููู ุจูุฌุงุญ ูุฅุฑุณุงู ุงูููู."
        )
        
        logger.info(f"ุชู ุชุตุฏูุฑ ุจูุงูุงุช ุงููุณุชุฎุฏููู ุจูุฌุงุญ ูููุฏูุฑ {user_id}")
    
    except Exception as e:
        logger.error(f"ุฎุทุฃ ุฃุซูุงุก ูุนุงูุฌุฉ ุฃูุฑ ุชุตุฏูุฑ ุงููุณุชุฎุฏููู ูููุณุชุฎุฏู {user_id}: {e}")
        await context.bot.send_message(
            chat_id=chat_id,
            text="โ ุญุฏุซ ุฎุทุฃ ุบูุฑ ูุชููุน ุฃุซูุงุก ุชูููุฐ ุงูุฃูุฑ. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู ูุงุญูุงู."
        )

async def check_admin_rights(user_id, context):
    """
    ุงูุชุญูู ููุง ุฅุฐุง ูุงู ุงููุณุชุฎุฏู ูุฏูุฑุงู
    
    ุงููุนููุงุช:
        user_id (int): ูุนุฑู ุงููุณุชุฎุฏู ููุชุญูู
        context (CallbackContext): ุณูุงู ุงููุญุงุฏุซุฉ
    
    ุงูุนุงุฆุฏ:
        bool: True ุฅุฐุง ูุงู ุงููุณุชุฎุฏู ูุฏูุฑุงูุ False ุฎูุงู ุฐูู
    """
    try:
        # ุงูุญุตูู ุนูู ูุฏูุฑ ูุงุนุฏุฉ ุงูุจูุงูุงุช ูู ุณูุงู ุงูุจูุช
        db_manager = context.application.bot_data.get('DB_MANAGER')
        
        if not db_manager:
            logger.error("ูู ูุชู ุงูุนุซูุฑ ุนูู ูุฏูุฑ ูุงุนุฏุฉ ุงูุจูุงูุงุช ูู ุณูุงู ุงูุจูุช")
            return False
        
        # ุงุณุชุฎุฏุงู ุฏุงูุฉ is_user_admin ุงููุฎุตุตุฉ ูู DatabaseManager
        is_admin = db_manager.is_user_admin(user_id)
        
        if is_admin:
            logger.info(f"ุชู ุงูุชุญูู ูู ุตูุงุญูุงุช ุงููุฏูุฑ ูููุณุชุฎุฏู {user_id}: ุตูุงุญูุงุช ูุฏูุฑ ูุคูุฏุฉ")
            return True
        
        logger.warning(f"ุชู ุงูุชุญูู ูู ุตูุงุญูุงุช ุงููุฏูุฑ ูููุณุชุฎุฏู {user_id}: ููุณ ูุฏูุฑุงู")
        return False
    
    except Exception as e:
        logger.error(f"ุฎุทุฃ ุฃุซูุงุก ุงูุชุญูู ูู ุตูุงุญูุงุช ุงููุฏูุฑ ูููุณุชุฎุฏู {user_id}: {e}")
        return False

async def export_users_to_excel(output_dir=None, admin_user_id=None):
    """
    ุชุตุฏูุฑ ุจูุงูุงุช ุงููุณุชุฎุฏููู ุงููุณุฌููู ุฅูู ููู ุฅูุณู
    
    ุงููุนููุงุช:
        output_dir (str): ูุณุงุฑ ุงููุฌูุฏ ูุญูุธ ููู ุงูุฅูุณู. ุฅุฐุง ูุงู Noneุ ุณูุชู ุงุณุชุฎุฏุงู ุงููุฌูุฏ ุงูุญุงูู.
        admin_user_id (int): ูุนุฑู ุงููุณุชุฎุฏู ุงููุฏูุฑ ุงูุฐู ุทูุจ ุงูุชุตุฏูุฑ. ุณูุชู ุชุถูููู ูู ุงุณู ุงูููู.
    
    ุงูุนุงุฆุฏ:
        str: ุงููุณุงุฑ ุงููุงูู ูููู ุงูุฅูุณู ุงูููุตุฏููุฑ
    """
    try:
        # ุฅูุดุงุก ูุฌูุฏ ููุชุตุฏูุฑ ุฅุฐุง ูู ููู ููุฌูุฏุงู
        if output_dir is None:
            output_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "exports")
        
        os.makedirs(output_dir, exist_ok=True)
        
        # ุงูุญุตูู ุนูู ูุญุฑู ูุงุนุฏุฉ ุงูุจูุงูุงุช ูู ูุฏูุฑ ูุงุนุฏุฉ ุงูุจูุงูุงุช
        conn = None
        try:
            from database.connection import connect_db
            conn = connect_db()
        except ImportError:
            logger.error("ูุดู ุงุณุชูุฑุงุฏ ูุญุฏุฉ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช")
            return None
        
        if not conn:
            logger.error("ูุดู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช. ุชุฃูุฏ ูู ุตุญุฉ ูุนูููุงุช ุงูุงุชุตุงู.")
            return None
        
        # ุงุณุชุนูุงู SQL ูุงุณุชุฎุฑุงุฌ ุจูุงูุงุช ุงููุณุชุฎุฏููู ุงููุณุฌููู ููุท
        query = """
        SELECT 
            user_id AS "ูุนุฑู ุงููุณุชุฎุฏู",
            username AS "ุงุณู ุงููุณุชุฎุฏู",
            first_name AS "ุงูุงุณู ุงูุฃูู",
            last_name AS "ุงูุงุณู ุงูุฃุฎูุฑ",
            full_name AS "ุงูุงุณู ุงููุงูู",
            email AS "ุงูุจุฑูุฏ ุงูุฅููุชุฑููู",
            phone AS "ุฑูู ุงูุฌูุงู",
            grade AS "ุงูุตู ุงูุฏุฑุงุณู",
            is_registered AS "ูุณุฌู",
            is_admin AS "ูุฏูุฑ",
            language_code AS "ุฑูุฒ ุงููุบุฉ",
            first_seen_timestamp AS "ุชุงุฑูุฎ ุฃูู ุธููุฑ",
            last_active_timestamp AS "ุชุงุฑูุฎ ุขุฎุฑ ูุดุงุท",
            last_interaction_date AS "ุชุงุฑูุฎ ุขุฎุฑ ุชูุงุนู"
        FROM 
            users
        WHERE 
            is_registered = TRUE
        ORDER BY 
            last_interaction_date DESC
        """
        
        # ุชูููุฐ ุงูุงุณุชุนูุงู ูุชุญููู ุงููุชุงุฆุฌ ุฅูู DataFrame
        cur = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
        cur.execute(query)
        result = cur.fetchall()
        df = pd.DataFrame([dict(row) for row in result])
        
        # ูุนุงูุฌุฉ ุงูุญููู ุงูุฒูููุฉ ูุฅุฒุงูุฉ ูุนูููุงุช ุงูููุทูุฉ ุงูุฒูููุฉ
        datetime_columns = [
            "ุชุงุฑูุฎ ุฃูู ุธููุฑ", 
            "ุชุงุฑูุฎ ุขุฎุฑ ูุดุงุท", 
            "ุชุงุฑูุฎ ุขุฎุฑ ุชูุงุนู"
        ]
        
        for col in datetime_columns:
            if col in df.columns and not df[col].empty:
                # ุชุญููู ุงูุญููู ุงูุฒูููุฉ ุฅูู ููู ุจุฏูู ููุทูุฉ ุฒูููุฉ
                df[col] = df[col].dt.tz_localize(None)
        
        # ุฅูุดุงุก ุงุณู ุงูููู ูุน ุงูุทุงุจุน ุงูุฒููู ููุนุฑู ุงููุฏูุฑ
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        admin_suffix = f"_by_admin_{admin_user_id}" if admin_user_id else ""
        excel_filename = f"users_data_{timestamp}{admin_suffix}.xlsx"
        excel_path = os.path.join(output_dir, excel_filename)
        
        # ุชุตุฏูุฑ ุงูุจูุงูุงุช ุฅูู ููู ุฅูุณู
        logger.info(f"ุฌุงุฑู ุชุตุฏูุฑ ุงูุจูุงูุงุช ุฅูู ููู ุฅูุณู: {excel_path}")
        
        # ุฅูุดุงุก ูุงุชุจ ุฅูุณู
        with pd.ExcelWriter(excel_path, engine='openpyxl') as writer:
            # ูุชุงุจุฉ ุงูุจูุงูุงุช
            df.to_excel(writer, sheet_name='ุจูุงูุงุช ุงููุณุชุฎุฏููู', index=False)
            
            # ุงูุญุตูู ุนูู ูุฑูุฉ ุงูุนูู ูุชูุณูููุง
            workbook = writer.book
            worksheet = writer.sheets['ุจูุงูุงุช ุงููุณุชุฎุฏููู']
            
            # ุถุจุท ุนุฑุถ ุงูุฃุนูุฏุฉ ุชููุงุฆูุงู
            for i, column in enumerate(df.columns):
                column_width = max(df[column].astype(str).map(len).max(), len(column)) + 2
                worksheet.column_dimensions[chr(65 + i)].width = column_width
        
        logger.info(f"ุชู ุชุตุฏูุฑ ุจูุงูุงุช ุงููุณุชุฎุฏููู ุจูุฌุงุญ ุฅูู: {excel_path}")
        return excel_path
    
    except Exception as e:
        logger.error(f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชุตุฏูุฑ ุจูุงูุงุช ุงููุณุชุฎุฏููู: {e}")
        return None
