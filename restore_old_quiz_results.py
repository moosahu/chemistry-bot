#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
ุณูุฑูุจุช ูุงุณุชุนุงุฏุฉ ูุชุงุฆุฌ ุงูุงุฎุชุจุงุฑุงุช ุงููุฏููุฉ
ูุนูุฏ ุญุณุงุจ ุงููุชุงุฆุฌ ูู ุชูุงุตูู ุงูุฅุฌุงุจุงุช ุงููุญููุธุฉ
"""

import json
import logging
from datetime import datetime
from typing import Dict, List, Any, Optional

# ุฅุนุฏุงุฏ ุงูุชุณุฌูู
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class QuizResultsRestorer:
    """ูุฆุฉ ูุงุณุชุนุงุฏุฉ ูุชุงุฆุฌ ุงูุงุฎุชุจุงุฑุงุช ุงููุฏููุฉ"""
    
    def __init__(self, db_manager):
        """ุชููุฆุฉ ุงููุณุชุนูุฏ"""
        self.db_manager = db_manager
        logger.info("ุชู ุชููุฆุฉ ูุณุชุนูุฏ ุงููุชุงุฆุฌ ุงููุฏููุฉ")
    
    def analyze_old_results(self) -> Dict[str, Any]:
        """ุชุญููู ุงููุชุงุฆุฌ ุงููุฏููุฉ ููุนุฑูุฉ ูุง ูููู ุงุณุชุนุงุฏุชู"""
        try:
            # ูุญุต ุงููุชุงุฆุฌ ุงููุฏููุฉ
            query = """
                SELECT 
                    result_id,
                    user_id,
                    quiz_type,
                    total_questions,
                    score,
                    percentage,
                    answers_details,
                    completed_at,
                    CASE 
                        WHEN answers_details IS NOT NULL AND answers_details != 'null' 
                        THEN 'recoverable'
                        ELSE 'not_recoverable'
                    END as recovery_status
                FROM quiz_results 
                WHERE percentage = 0 OR score = 0
                ORDER BY completed_at DESC
            """
            
            results = self.db_manager._execute_query(query, fetch_all=True)
            
            if not results:
                return {
                    'total_zero_results': 0,
                    'recoverable': 0,
                    'not_recoverable': 0,
                    'sample_data': []
                }
            
            recoverable = [r for r in results if r['recovery_status'] == 'recoverable']
            not_recoverable = [r for r in results if r['recovery_status'] == 'not_recoverable']
            
            # ุนููุฉ ูู ุงูุจูุงูุงุช ุงููุงุจูุฉ ููุงุณุชุนุงุฏุฉ
            sample_data = []
            for result in recoverable[:3]:  # ุฃูู 3 ูุชุงุฆุฌ
                try:
                    answers_details = json.loads(result['answers_details']) if result['answers_details'] else []
                    sample_data.append({
                        'result_id': result['result_id'],
                        'user_id': result['user_id'],
                        'total_questions': result['total_questions'],
                        'answers_count': len(answers_details),
                        'has_correct_answers': any(ans.get('is_correct', False) for ans in answers_details),
                        'completed_at': result['completed_at']
                    })
                except Exception as e:
                    logger.warning(f"ุฎุทุฃ ูู ุชุญููู ุงููุชูุฌุฉ {result['result_id']}: {e}")
            
            return {
                'total_zero_results': len(results),
                'recoverable': len(recoverable),
                'not_recoverable': len(not_recoverable),
                'sample_data': sample_data
            }
            
        except Exception as e:
            logger.error(f"ุฎุทุฃ ูู ุชุญููู ุงููุชุงุฆุฌ ุงููุฏููุฉ: {e}")
            return {}
    
    def restore_single_result(self, result_id: int) -> bool:
        """ุงุณุชุนุงุฏุฉ ูุชูุฌุฉ ูุงุญุฏุฉ"""
        try:
            # ุงูุญุตูู ุนูู ุชูุงุตูู ุงููุชูุฌุฉ
            query = """
                SELECT result_id, total_questions, answers_details
                FROM quiz_results 
                WHERE result_id = %s
            """
            
            result = self.db_manager._execute_query(query, (result_id,), fetch_one=True)
            
            if not result or not result['answers_details']:
                logger.warning(f"ูุง ุชูุฌุฏ ุชูุงุตูู ุฅุฌุงุจุงุช ูููุชูุฌุฉ {result_id}")
                return False
            
            # ุชุญููู ุชูุงุตูู ุงูุฅุฌุงุจุงุช
            try:
                answers_details = json.loads(result['answers_details'])
            except json.JSONDecodeError:
                logger.error(f"ุฎุทุฃ ูู ุชุญููู JSON ูููุชูุฌุฉ {result_id}")
                return False
            
            # ุญุณุงุจ ุงููุชูุฌุฉ ุงูุตุญูุญุฉ
            correct_answers = 0
            total_answered = 0
            
            for answer in answers_details:
                if answer.get('status') == 'answered':
                    total_answered += 1
                    if answer.get('is_correct', False):
                        correct_answers += 1
            
            # ุญุณุงุจ ุงููุณุจุฉ ุงููุฆููุฉ
            if total_answered > 0:
                percentage = (correct_answers / total_answered) * 100
            else:
                percentage = 0
            
            # ุชุญุฏูุซ ุงููุชูุฌุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
            update_query = """
                UPDATE quiz_results 
                SET score = %s, percentage = %s
                WHERE result_id = %s
            """
            
            success = self.db_manager._execute_query(
                update_query, 
                (correct_answers, round(percentage, 2), result_id), 
                commit=True
            )
            
            if success:
                logger.info(f"ุชู ุงุณุชุนุงุฏุฉ ุงููุชูุฌุฉ {result_id}: {correct_answers}/{total_answered} ({percentage:.2f}%)")
                return True
            else:
                logger.error(f"ูุดู ูู ุชุญุฏูุซ ุงููุชูุฌุฉ {result_id}")
                return False
                
        except Exception as e:
            logger.error(f"ุฎุทุฃ ูู ุงุณุชุนุงุฏุฉ ุงููุชูุฌุฉ {result_id}: {e}")
            return False
    
    def restore_all_recoverable_results(self) -> Dict[str, int]:
        """ุงุณุชุนุงุฏุฉ ุฌููุน ุงููุชุงุฆุฌ ุงููุงุจูุฉ ููุงุณุชุนุงุฏุฉ"""
        try:
            # ุงูุญุตูู ุนูู ุฌููุน ุงููุชุงุฆุฌ ุงููุงุจูุฉ ููุงุณุชุนุงุฏุฉ
            query = """
                SELECT result_id
                FROM quiz_results 
                WHERE (percentage = 0 OR score = 0)
                AND answers_details IS NOT NULL 
                AND answers_details != 'null'
                ORDER BY completed_at DESC
            """
            
            results = self.db_manager._execute_query(query, fetch_all=True)
            
            if not results:
                logger.info("ูุง ุชูุฌุฏ ูุชุงุฆุฌ ูุงุจูุฉ ููุงุณุชุนุงุฏุฉ")
                return {'total': 0, 'restored': 0, 'failed': 0}
            
            total = len(results)
            restored = 0
            failed = 0
            
            logger.info(f"ุจุฏุก ุงุณุชุนุงุฏุฉ {total} ูุชูุฌุฉ...")
            
            for i, result in enumerate(results, 1):
                result_id = result['result_id']
                
                if self.restore_single_result(result_id):
                    restored += 1
                else:
                    failed += 1
                
                # ุชูุฑูุฑ ุงูุชูุฏู ูู 10 ูุชุงุฆุฌ
                if i % 10 == 0:
                    logger.info(f"ุชู ูุนุงูุฌุฉ {i}/{total} ูุชูุฌุฉ...")
            
            logger.info(f"ุงูุชูุช ุงูุงุณุชุนุงุฏุฉ: {restored} ูุฌุญุชุ {failed} ูุดูุช ูู ุฃุตู {total}")
            
            return {
                'total': total,
                'restored': restored,
                'failed': failed
            }
            
        except Exception as e:
            logger.error(f"ุฎุทุฃ ูู ุงุณุชุนุงุฏุฉ ุงููุชุงุฆุฌ: {e}")
            return {'total': 0, 'restored': 0, 'failed': 0}
    
    def create_backup_before_restore(self) -> bool:
        """ุฅูุดุงุก ูุณุฎุฉ ุงุญุชูุงุทูุฉ ูุจู ุงูุงุณุชุนุงุฏุฉ"""
        try:
            backup_query = """
                CREATE TABLE IF NOT EXISTS quiz_results_backup_before_restore AS 
                SELECT * FROM quiz_results 
                WHERE percentage = 0 OR score = 0
            """
            
            success = self.db_manager._execute_query(backup_query, commit=True)
            
            if success:
                logger.info("ุชู ุฅูุดุงุก ูุณุฎุฉ ุงุญุชูุงุทูุฉ: quiz_results_backup_before_restore")
                return True
            else:
                logger.error("ูุดู ูู ุฅูุดุงุก ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ")
                return False
                
        except Exception as e:
            logger.error(f"ุฎุทุฃ ูู ุฅูุดุงุก ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ: {e}")
            return False


def main():
    """ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ ููุงุฎุชุจุงุฑ"""
    print("๐ง ุณูุฑูุจุช ุงุณุชุนุงุฏุฉ ูุชุงุฆุฌ ุงูุงุฎุชุจุงุฑุงุช ุงููุฏููุฉ")
    print("ูุฐุง ุงูุณูุฑูุจุช ูุญุชุงุฌ ูุชุดุบููู ูู ุฏุงุฎู ุจูุฆุฉ ุงูุจูุช ูุน ุงููุตูู ููุงุนุฏุฉ ุงูุจูุงูุงุช")
    print("\nูุงุณุชุฎุฏุงู ุงูุณูุฑูุจุช:")
    print("1. ุงุณุชูุฑุฏ DatabaseManager ูู ูุดุฑูุนู")
    print("2. ุฃูุดุฆ instance ูู QuizResultsRestorer")
    print("3. ุงุณุชุฎุฏู analyze_old_results() ููุญุต ุงูุจูุงูุงุช")
    print("4. ุงุณุชุฎุฏู restore_all_recoverable_results() ููุงุณุชุนุงุฏุฉ")


if __name__ == "__main__":
    main()

